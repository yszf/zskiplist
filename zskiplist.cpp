#include "zskiplist.h"

/*
 * 创建一个层数为 level 的跳跃表节点，
 * 并将节点的成员对象设置为 obj ，分值设置为 score 。
 *
 * 返回值为新创建的跳跃表节点
 *
 * T = O(1)
 */
zskiplistNode *zslCreateNode(int level, double score, std::string obj) {

	// 分配空间
	zskiplistNode *zn = new zskiplistNode;

	// 设置属性
	zn->score = score;
	zn->obj = obj;

	return zn;
}

/*
 * 创建并返回一个新的跳跃表
 *
 * T = O(1)
 */
zskiplist *zslCreate(void) {
	int j;
	zskiplist *zsl;

	// 分配空间
	zsl = new zskiplist;

	// 设置高度和起始层数
	zsl->level = 1;
	zsl->length = 0;

	// 初始化表头节点
	// T = O(1)
	zsl->header = zslCreateNode(ZSKIPLIST_MAXLEVEL, 0, "");
	for (j = 0; j < ZSKIPLIST_MAXLEVEL; j++) {
		zsl->header->level[j].forward = NULL;
		zsl->header->level[j].span = 0;
	}
	zsl->header->backward = NULL;

	// 设置表尾
	zsl->tail = NULL;

	return zsl;
}

/*
 * 释放给定的跳跃表节点
 *
 * T = O(1)
 */
void zslFreeNode(zskiplistNode *node) {
	delete node;
}

/*
 * 释放给定跳跃表，以及表中的所有节点
 *
 * T = O(N)
 */
void zslFree(zskiplist *zsl) {

	zskiplistNode *node = zsl->header->level[0].forward, *next;

	// 释放表头
	delete zsl->header;

	// 释放表中所有节点
	// T = O(N)
	while (node) {

		next = node->level[0].forward;

		zslFreeNode(node);

		node = next;
	}

	// 释放跳跃表结构
	delete zsl;
}

/* Returns a random level for the new skiplist node we are going to create.
 *
 * 返回一个随机值，用作新跳跃表节点的层数。
 *
 * The return value of this function is between 1 and ZSKIPLIST_MAXLEVEL
 * (both inclusive), with a powerlaw-alike distribution where higher
 * levels are less likely to be returned.
 *
 * 返回值介乎 1 和 ZSKIPLIST_MAXLEVEL 之间（包含 ZSKIPLIST_MAXLEVEL），
 * 根据随机算法所使用的幂次定律，越大的值生成的几率越小。
 *
 * T = O(N)
 */
int zslRandomLevel(void) {
	int level = 1;

	while ((rand() & 0xFFFF) < (ZSKIPLIST_P * 0xFFFF))
		level += 1;

	return (level < ZSKIPLIST_MAXLEVEL) ? level : ZSKIPLIST_MAXLEVEL;
}

/*
 * 创建一个成员为 obj ，分值为 score 的新节点，
 * 并将这个新节点插入到跳跃表 zsl 中。
 *
 * 函数的返回值为新节点。
 *
 * T_wrost = O(N^2), T_avg = O(N log N)
 */
zskiplistNode *zslInsert(zskiplist *zsl, double score, std::string obj) {
	zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;
	unsigned int rank[ZSKIPLIST_MAXLEVEL];
	int i, level;

	//redisAssert(!isnan(score));

	// 在各个层查找节点的插入位置
	// T_wrost = O(N^2), T_avg = O(N log N)
	x = zsl->header;
	for (i = zsl->level - 1; i >= 0; i--) {

		/* store rank that is crossed to reach the insert position */
		// 如果 i 不是 zsl->level-1 层
		// 那么 i 层的起始 rank 值为 i+1 层的 rank 值
		// 各个层的 rank 值一层层累积
		// 最终 rank[0] 的值加一就是新节点的前置节点的排位
		// rank[0] 会在后面成为计算 span 值和 rank 值的基础
		rank[i] = i == (zsl->level - 1) ? 0 : rank[i + 1];

		// 沿着前进指针遍历跳跃表
		// T_wrost = O(N^2), T_avg = O(N log N)
		while (x->level[i].forward &&
			(x->level[i].forward->score < score ||
				// 比对分值
			(x->level[i].forward->score == score &&
				// 比对成员， T = O(N)
				x->level[i].forward->obj < obj))) {

			// 记录沿途跨越了多少个节点
			rank[i] += x->level[i].span;

			// 移动至下一指针
			x = x->level[i].forward;
		}
		// 记录将要和新节点相连接的节点
		update[i] = x;
	}

	/* we assume the key is not already inside, since we allow duplicated
	 * scores, and the re-insertion of score and redis object should never
	 * happen since the caller of zslInsert() should test in the hash table
	 * if the element is already inside or not.
	 *
	 * zslInsert() 的调用者会确保同分值且同成员的元素不会出现，
	 * 所以这里不需要进一步进行检查，可以直接创建新元素。
	 */

	 // 获取一个随机值作为新节点的层数
	 // T = O(N)
	level = zslRandomLevel();

	// 如果新节点的层数比表中其他节点的层数都要大
	// 那么初始化表头节点中未使用的层，并将它们记录到 update 数组中
	// 将来也指向新节点
	if (level > zsl->level) {

		// 初始化未使用层
		// T = O(1)
		for (i = zsl->level; i < level; i++) {
			rank[i] = 0;
			update[i] = zsl->header;
			update[i]->level[i].span = zsl->length;
		}

		// 更新表中节点最大层数
		zsl->level = level;
	}

	// 创建新节点
	x = zslCreateNode(level, score, obj);

	// 将前面记录的指针指向新节点，并做相应的设置
	// T = O(1)
	for (i = 0; i < level; i++) {

		// 设置新节点的 forward 指针
		x->level[i].forward = update[i]->level[i].forward;

		// 将沿途记录的各个节点的 forward 指针指向新节点
		update[i]->level[i].forward = x;

		/* update span covered by update[i] as x is inserted here */
		// 计算新节点跨越的节点数量
		x->level[i].span = update[i]->level[i].span - (rank[0] - rank[i]);

		// 更新新节点插入之后，沿途节点的 span 值
		// 其中的 +1 计算的是新节点
		update[i]->level[i].span = (rank[0] - rank[i]) + 1;
	}

	/* increment span for untouched levels */
	// 未接触的节点的 span 值也需要增一，这些节点直接从表头指向新节点
	// T = O(1)
	for (i = level; i < zsl->level; i++) {
		update[i]->level[i].span++;
	}

	// 设置新节点的后退指针
	x->backward = (update[0] == zsl->header) ? NULL : update[0];
	if (x->level[0].forward)
		x->level[0].forward->backward = x;
	else
		zsl->tail = x;

	// 跳跃表的节点计数增一
	zsl->length++;

	return x;
}